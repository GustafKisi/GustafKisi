name: Create Sprint Planning Ticket

on:
  schedule:
    # At 04:00 on Monday
    - cron: '0 4 * * 1'
  workflow_dispatch:
env:
  # The date of the first run of the action. It has to be set to a date that is on the same weekday as the cron.
  # 12/11 is Monday, so the cron is set to run on Monday.
  # Every second week of the bi-weekly cycle, the action is going to be skipped.
  # The cron time can be set to any time of the day.
  FIRST_RUN_DATE: "2024-05-13"
jobs:
  weekindex:
    runs-on: ubuntu-latest
    outputs:
      weekindex: ${{ steps.calculate.outputs.weekindex }}
    steps:
      - name: Calculate weekdiff
        id: calculate
        run: |
          current_date=$(date +%Y-%m-%d)
          start=$(date -d ${{ env.FIRST_RUN_DATE }} +%s)
          end=$(date -d $current_date +%s)
          weekdiff=$(((end-start) / 60 / 60 / 24 / 7))
          weekindex=$((weekdiff % 2))
          echo "weekindex=$weekindex" >> "$GITHUB_OUTPUT"
          echo "FIRST_RUN_DATE: ${{ env.FIRST_RUN_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "current_date: $current_date" >> $GITHUB_STEP_SUMMARY
          echo "weekdiff: $weekdiff" >> $GITHUB_STEP_SUMMARY
          echo "weekindex: $weekindex" >> $GITHUB_STEP_SUMMARY
          if [ $weekindex -eq 0 ]; then
            echo "ðŸŸ¢ It's the first week of the bi-weekly cycle. The action is going to run." >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ”´ It's the second week of the bi-weekly cycle. The action is going to be skipped." >> $GITHUB_STEP_SUMMARY
          fi
  # Replace with your real job name and steps
  create-issue:
    name: Create sprint planning issue
    if: ${{ needs.weekindex.outputs.weekindex == 0 }}
    runs-on: ubuntu-latest
    permissions:
      issues: write # we can add project permissions too to add this ticket automatically to the sprint.
    needs:
      - weekindex
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
      CLOSE_PREVIOUS: true
      PINNED: true
      ASSIGNEES: GustafKisi
      LABELS: ""
      TITLE: Sprint Planning
      TEMPLATE: sprint.md
      BODY: | # can't use --template non interactively yet -> https://github.com/cli/cli/issues/7405
            # Sprint Planning

            > [How we do sprints](../../docs/protocols/how_we_do_sprints.md)

            ## Agenda

            | Release Candidate | Team Lead   | QA Member | Release Lead |
            | ----------------- | ----------- | --------- | ------------ |
            | 60.0              | @GustafKisi | @Pawel    | @            |

            Please copy the template below, make a comment, and fill in your plan for this sprint.

            > P.S. Don't forget to self-reflect at the end of the sprint!

            ## Template

            Please copy the section below and fill in your plan for this sprint. Please remember to fill in your self-reflection at the end of the sprint.

            ```md
            ## Your Name

            <!--- Main priorities -->

            - [ ]

            ### Optional

            <!--- Optional tasks -->

            - [ ]

            ### Extra

            <!--- Extra tasks that pop up during the sprint -->

            ### Self-Reflections

            <!--- Self reflections to write at the end of the sprint! -->
            ```
      # PROJECT: 67 # kisi-hardware - Sprints
    steps:
      - name: Create sprint planning issue
        run: |
          if [[ $CLOSE_PREVIOUS == true ]]; then
            previous_issue_number=$(gh issue list \
              --label "$LABELS" \
              --json number \
              --jq '.[0].number')
            if [[ -n $previous_issue_number ]]; then
              gh issue close "$previous_issue_number"
              gh issue unpin "$previous_issue_number"
            fi
          fi
          new_issue_url=$(gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --body "$BODY" )
          if [[ $PINNED == true ]]; then
            gh issue pin "$new_issue_url"
          fi
